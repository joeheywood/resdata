mutate(dataset  = "tno_b", LAD11NM = "London")
rbind(crm_dat %>% select(dataset, x, y, LAD11NM),
l_crm %>% select(dataset, x, y, LAD11NM))
rbind(crm_dat %>% select(dataset, x, y, LAD11NM),
l_crm %>% select(dataset, x, y, LAD11NM)) %>%
insert_boro_db()
#### Mobility Data ####
google_act_fl <- "../londonCV19dash2/data/updated/raw/google_activity_raw_2021-02-28.csv"
dat <- fread(google_act_fl) %>%
filter(country_region == "United Kingdom",
sub_region_1 == "Greater London") %>%
mutate(wk = ceiling_date(date, "week")) %>%
group_by(wk, sub_region_2) %>%
summarise(res_wk = mean(residential_percent_change_from_baseline,
na.rm = TRUE),
transit_wk = mean(transit_stations_percent_change_from_baseline,
na.rm = TRUE)) %>%
ungroup()
library(lubridate)
dat <- fread(google_act_fl) %>%
filter(country_region == "United Kingdom",
sub_region_1 == "Greater London") %>%
mutate(wk = ceiling_date(date, "week")) %>%
group_by(wk, sub_region_2) %>%
summarise(res_wk = mean(residential_percent_change_from_baseline,
na.rm = TRUE),
transit_wk = mean(transit_stations_percent_change_from_baseline,
na.rm = TRUE)) %>%
ungroup()
ldat <- dat %>% filter(nchar(sub_region_2) == 0)
dat <- dat %>% filter(nchar(sub_region_2) > 0) %>%
mutate(LAD11NM = str_replace(
sub_region_2, " and ", " & ")) %>%
mutate(LAD11NM = str_replace(
LAD11NM, "((London|Royal) Borough|City) of ", ""))
head(dat)
head(ldat)
tr_dat <- dat %>% filter(nchar(sub_region_2) > 0) %>%
mutate(LAD11NM = str_replace(
sub_region_2, " and ", " & ")) %>%
mutate(LAD11NM = str_replace(
LAD11NM, "((London|Royal) Borough|City) of ", "")) %>%
mutate(LAD11NM = str_replace("London", "City"),
dataset = "gtransit", x = wk, y = transit_week)
#### Mobility Data ####
google_act_fl <- "../londonCV19dash2/data/updated/raw/google_activity_raw_2021-02-28.csv"
dat <- fread(google_act_fl) %>%
filter(country_region == "United Kingdom",
sub_region_1 == "Greater London") %>%
mutate(wk = ceiling_date(date, "week")) %>%
group_by(wk, sub_region_2) %>%
summarise(res_wk = mean(residential_percent_change_from_baseline,
na.rm = TRUE),
transit_wk = mean(transit_stations_percent_change_from_baseline,
na.rm = TRUE)) %>%
ungroup()
table(dat$sub_region_2)
dat <- fread(google_act_fl) %>%
filter(country_region == "United Kingdom",
sub_region_1 == "Greater London") %>%
mutate(wk = ceiling_date(date, "week")) %>%
group_by(wk, sub_region_2) %>%
summarise(res_wk = mean(residential_percent_change_from_baseline,
na.rm = TRUE),
transit_wk = mean(transit_stations_percent_change_from_baseline,
na.rm = TRUE)) %>%
ungroup() %>%
mutate(LAD11NM = str_replace(
sub_region_2, " and ", " & ")) %>%
mutate(LAD11NM = str_replace(
LAD11NM, "((London|Royal) Borough|City) of ", "")) %>%
mutate(LAD11NM = str_replace("London", "City"),
dataset = "gtransit", x = wk, y = transit_week)
dat <- fread(google_act_fl) %>%
filter(country_region == "United Kingdom",
sub_region_1 == "Greater London") %>%
mutate(wk = ceiling_date(date, "week")) %>%
group_by(wk, sub_region_2) %>%
summarise(res_wk = mean(residential_percent_change_from_baseline,
na.rm = TRUE),
transit_wk = mean(transit_stations_percent_change_from_baseline,
na.rm = TRUE)) %>%
ungroup() %>%
mutate(LAD11NM = str_replace(
sub_region_2, " and ", " & "))
dat <- fread(google_act_fl) %>%
filter(country_region == "United Kingdom",
sub_region_1 == "Greater London") %>%
mutate(wk = ceiling_date(date, "week")) %>%
group_by(wk, sub_region_2) %>%
summarise(res_wk = mean(residential_percent_change_from_baseline,
na.rm = TRUE),
transit_wk = mean(transit_stations_percent_change_from_baseline,
na.rm = TRUE)) %>%
ungroup() %>%
mutate(LAD11NM = str_replace(
sub_region_2, " and ", " & ")) %>%
mutate(LAD11NM = str_replace(
LAD11NM, "((London|Royal) Borough|City) of ", ""))
dat <- fread(google_act_fl) %>%
filter(country_region == "United Kingdom",
sub_region_1 == "Greater London") %>%
mutate(wk = ceiling_date(date, "week")) %>%
group_by(wk, sub_region_2) %>%
summarise(res_wk = mean(residential_percent_change_from_baseline,
na.rm = TRUE),
transit_wk = mean(transit_stations_percent_change_from_baseline,
na.rm = TRUE)) %>%
ungroup() %>%
mutate(LAD11NM = str_replace(
sub_region_2, " and ", " & ")) %>%
mutate(LAD11NM = str_replace(
LAD11NM, "((London|Royal) Borough|City) of ", "")) %>%
mutate(LAD11NM = str_replace(LAD11NM, "London", "City"),
dataset = "gtransit", x = wk, y = transit_week)
dat <- fread(google_act_fl) %>%
filter(country_region == "United Kingdom",
sub_region_1 == "Greater London") %>%
mutate(wk = ceiling_date(date, "week")) %>%
group_by(wk, sub_region_2) %>%
summarise(res_wk = mean(residential_percent_change_from_baseline,
na.rm = TRUE),
transit_wk = mean(transit_stations_percent_change_from_baseline,
na.rm = TRUE)) %>%
ungroup() %>%
mutate(LAD11NM = str_replace(
sub_region_2, " and ", " & ")) %>%
mutate(LAD11NM = str_replace(
LAD11NM, "((London|Royal) Borough|City) of ", "")) %>%
mutate(LAD11NM = str_replace(LAD11NM, "London", "City") )
names(dat)
table(dat$LAD11NM)
dat <- fread(google_act_fl) %>%
filter(country_region == "United Kingdom",
sub_region_1 == "Greater London") %>%
mutate(wk = ceiling_date(date, "week")) %>%
group_by(wk, sub_region_2) %>%
summarise(res_wk = mean(residential_percent_change_from_baseline,
na.rm = TRUE),
transit_wk = mean(transit_stations_percent_change_from_baseline,
na.rm = TRUE)) %>%
ungroup() %>%
mutate(LAD11NM = str_replace(
sub_region_2, " and ", " & ")) %>%
mutate(LAD11NM = str_replace(
LAD11NM, "((London|Royal) Borough|City) of ", "")) %>%
mutate(LAD11NM = str_replace(LAD11NM, "London", "City") ) %>%
mutate(LAD11NM = ifelse(nchar(LAD11NM) == 0, "London", LAD11NM))
#### Transit ####
dat %>%
mutate(dataset = "gtransit") %>%
select(dataset, x = wk, y = transit_wk, LAD11NM) # %>%
#### Transit ####
dat %>%
mutate(dataset = "gtransit") %>%
select(dataset, x = wk, y = transit_wk, LAD11NM) %>%
insert_boro_db()
#### Homeworking ####
dat %>%
mutate(dataset = "gres") %>%
select(dataset, x = wk, y = res_wk, LAD11NM) %>%
insert_boro_db()
Sys.getenv("DASH_DATAPATH")
resdata::get_metadata()
remove.packages("resdata")
library(resdata)
library(devtools)
install.packages("devtools")
library(devtolls)
library(devtools)
library(devtools)
install.packages("pkgbuild")
library(devtools)
install.packages("glmnet")
install.packages("RSQLite")
library(resdata)
create_schema()
devtools::document()
remove.packages("resdata")
library(resdata)
create_schema()
devtools::document()
remove.packages("resdata")
library(resdata)
create_schema()
cnfg <- yaml::yaml.load_file("M:/rconfig.yaml")
conSuper <- dbConnect( dbDriver("Postgres"),
dbname = cnfg$dbname,
host = cnfg$host,
port = cnfg$port,
password = cnfg$password,
user = cnfg$user )
library(RPostgres)
conSuper <- dbConnect( dbDriver("Postgres"),
dbname = cnfg$dbname,
host = cnfg$host,
port = cnfg$port,
password = cnfg$password,
user = cnfg$user )
tables = c("mtd", "ind_dat", "ind_boro_dat")
for(i in 1:length(tables)) {
file <- read.xlsx( cnfg$schema_path, sheetName = tables[[i]] )
assign( tables[[i]], file )
print(tables[[i]])
schema <- paste0(apply(file, 1, paste0, collapse = " "), collapse = ",")
dbGetQuery(conSuper, paste0("DROP TABLE IF EXISTS ", tables[[i]]))
dbGetQuery(conSuper, paste0("CREATE TABLE ",tables[[i]],"(", schema,")"))
# load existing database
file <- read.csv(paste0("E:/project_folders/apps/db/tables/",tables[[i]], ".csv"))
file <- data.table::fread(paste0("E:/project_folders/apps/db/tables/",tables[[i]], ".csv"))
assign( tables[[i]], file )
# convert INT to DATE type. recommend to unify notation for date columns
if("xvardt" %in% colnames(file))
{
file$xvardt <- as.Date(file$xvardt, origin="1970-01-01")
}
if("x" %in% colnames(file))
{
file$x <- as.Date(file$x, origin="1970-01-01")
}
## if it's the metadata file, then remove NAs
if("dataset" %in% colnames(file)) {
file <- file %>% filter(!is.na(dataset))
}
#Prepare query
#1. Remove apostrophes from labels and titles
file <-  as.data.frame(sapply(file, function(x) gsub("'", "", x)))
#2. Transform values for INSERT INTO query
values <- paste0(apply(file, 1, function(x) paste0("('", paste0(x, collapse = "', '"), "')")), collapse = ", ")
#3. Correct "NULL" notation
values <- gsub("'NULL'", "NULL", values)
values <- gsub("'NA'", "NULL", values)
dbSendQuery(conSuper, paste0("INSERT INTO ",tables[[i]],  " VALUES ", values, ";"), n = Inf )
}
library(xlsx)
for(i in 1:length(tables)) {
file <- read.xlsx( cnfg$schema_path, sheetName = tables[[i]] )
assign( tables[[i]], file )
print(tables[[i]])
schema <- paste0(apply(file, 1, paste0, collapse = " "), collapse = ",")
dbGetQuery(conSuper, paste0("DROP TABLE IF EXISTS ", tables[[i]]))
dbGetQuery(conSuper, paste0("CREATE TABLE ",tables[[i]],"(", schema,")"))
# load existing database
file <- read.csv(paste0("E:/project_folders/apps/db/tables/",tables[[i]], ".csv"))
file <- data.table::fread(paste0("E:/project_folders/apps/db/tables/",tables[[i]], ".csv"))
assign( tables[[i]], file )
# convert INT to DATE type. recommend to unify notation for date columns
if("xvardt" %in% colnames(file))
{
file$xvardt <- as.Date(file$xvardt, origin="1970-01-01")
}
if("x" %in% colnames(file))
{
file$x <- as.Date(file$x, origin="1970-01-01")
}
## if it's the metadata file, then remove NAs
if("dataset" %in% colnames(file)) {
file <- file %>% filter(!is.na(dataset))
}
#Prepare query
#1. Remove apostrophes from labels and titles
file <-  as.data.frame(sapply(file, function(x) gsub("'", "", x)))
#2. Transform values for INSERT INTO query
values <- paste0(apply(file, 1, function(x) paste0("('", paste0(x, collapse = "', '"), "')")), collapse = ", ")
#3. Correct "NULL" notation
values <- gsub("'NULL'", "NULL", values)
values <- gsub("'NA'", "NULL", values)
dbSendQuery(conSuper, paste0("INSERT INTO ",tables[[i]],  " VALUES ", values, ";"), n = Inf )
}
library(dplyr)
for(i in 1:length(tables)) {
file <- read.xlsx( cnfg$schema_path, sheetName = tables[[i]] )
assign( tables[[i]], file )
print(tables[[i]])
schema <- paste0(apply(file, 1, paste0, collapse = " "), collapse = ",")
dbGetQuery(conSuper, paste0("DROP TABLE IF EXISTS ", tables[[i]]))
dbGetQuery(conSuper, paste0("CREATE TABLE ",tables[[i]],"(", schema,")"))
# load existing database
file <- read.csv(paste0("E:/project_folders/apps/db/tables/",tables[[i]], ".csv"))
file <- data.table::fread(paste0("E:/project_folders/apps/db/tables/",tables[[i]], ".csv"))
assign( tables[[i]], file )
# convert INT to DATE type. recommend to unify notation for date columns
if("xvardt" %in% colnames(file))
{
file$xvardt <- as.Date(file$xvardt, origin="1970-01-01")
}
if("x" %in% colnames(file))
{
file$x <- as.Date(file$x, origin="1970-01-01")
}
## if it's the metadata file, then remove NAs
if("dataset" %in% colnames(file)) {
file <- file %>% filter(!is.na(dataset))
}
#Prepare query
#1. Remove apostrophes from labels and titles
file <-  as.data.frame(sapply(file, function(x) gsub("'", "", x)))
#2. Transform values for INSERT INTO query
values <- paste0(apply(file, 1, function(x) paste0("('", paste0(x, collapse = "', '"), "')")), collapse = ", ")
#3. Correct "NULL" notation
values <- gsub("'NULL'", "NULL", values)
values <- gsub("'NA'", "NULL", values)
dbSendQuery(conSuper, paste0("INSERT INTO ",tables[[i]],  " VALUES ", values, ";"), n = Inf )
}
dbDisconnect(conSuper)
dbDisconnect(conSuper)
?dbDriver
remove.packages("resdata")
library(resdata)
create_schema()
remove.packages("resdata")
library(resdata)
remove.packages("resdata")
library(resdata)
devtools::document()
cn <- rdb_connect()
dbListTables(cn)
remove.packages("resdata")
library(resdata)
dat <- fread("Q:/Teams/D&PA/Apps/COVID19 Recovery Dashboard/indicators_data/db/updates/employment.csv")
dat <- data.table::fread("Q:/Teams/D&PA/Apps/COVID19 Recovery Dashboard/indicators_data/db/updates/employment.csv")
dat
dat %>% insert_db()
dat$xvardt
remove.packages("resdata")
library(resdata)
dat %>% insert_db()
dat$xvardt
as.Date(dat$xvardt, origin = "1970-1-1"
)
dat <- data.table::fread("Q:/Teams/D&PA/Apps/COVID19 Recovery Dashboard/indicators_data/db/updates/google_transit.csv")
tail(dat)
dat %>% insert_db()
dat <- data.table::fread("Q:/Teams/D&PA/Apps/COVID19 Recovery Dashboard/indicators_data/db/updates/claimant_count.csv")
dat %>% insert_db()
Sys.getenv("R_HOME")
Sys.getenv("HOME")
Sys.getenv("R_HOME")
install.packages("here")
library(here)
here()
dir(here())
setwd("man")
dir()
here()
here(""rconfig_template.yaml"")
here("rconfig_template.yaml")
here("../rconfig_template.yaml")
file.info("create_schema.Rd")
library(resdata)
library(resdata)
## main tidyverse
library(dplyr)
library(tidyr)
## useful helper packages
library(janitor)
library(glue)
library(stringr)
## get data from excel
library(readxl)
library(tidyxl)
library(unpivotr)
library(data.table)
log <- file.path(dpth, format(Sys.time(), "%Y-%m-%dT%H%M.log"))
dt_pth <- "E:/project_folders/apps/db/downloads/DataStore/"
log <- ""
aefl <- file.path(dt_pth, "gla-adult-education-budget",
"GLA%20AEB%202019-2020%20August%20-%20July%20R14%20Data%20Tables%20London.xlsx" )
xlsx_cells(aefl, "2.2 LAD, Volumes") %>%
behead("NNW", "table") %>%
behead("NNW", "section") %>%
behead("N", "vrb") %>%
behead("W", "LAD11NM") %>%
filter(LAD11NM != "Total", vrb == "Learner Participation") %>%
mutate(dataset = "ae", xwhich = 1, xvarchar = LAD11NM, xvardt = NA,
yval = numeric,  yvllb = "",
text = str_pad(numeric, width = 12, side = "left", pad = "0")) %>%
insert_db()
getwd()
library(resdata)
aefl
xlsx_cells(aefl, "2.2 LAD, Volumes") %>%
behead("NNW", "table") %>%
behead("NNW", "section") %>%
behead("N", "vrb") %>%
behead("W", "LAD11NM") %>%
filter(LAD11NM != "Total", vrb == "Learner Participation") %>%
mutate(dataset = "ae", xwhich = 1, xvarchar = LAD11NM, xvardt = NA,
yval = numeric,  yvllb = "",
text = str_pad(numeric, width = 12, side = "left", pad = "0")) %>%
insert_db()
devtools::document()
library(resdata)
xlsx_cells(aefl, "2.2 LAD, Volumes") %>%
behead("NNW", "table") %>%
behead("NNW", "section") %>%
behead("N", "vrb") %>%
behead("W", "LAD11NM") %>%
filter(LAD11NM != "Total", vrb == "Learner Participation") %>%
mutate(dataset = "ae", xwhich = 1, xvarchar = LAD11NM, xvardt = NA,
yval = numeric,  yvllb = "",
text = str_pad(numeric, width = 12, side = "left", pad = "0")) %>%
insert_db()
con <- rdb_connect()
configdir <- Sys.getenv("RDCONFIG")
cnfg <- yaml::yaml.load_file(here("rconfig.yml"))
library(here)
cnfg <- yaml::yaml.load_file(here("rconfig.yml"))
configdir
getwd()
con <- rdb_connect()
print(here())
print(here("rconfig.yaml"))
con <- rdb_connect()
db_list_tables(con)
DBI::dbListTables(con)
DBI::dbDisconnect(con)
library(resdata)
library(resdata)
library(resdata)
library(resdata)
library(resdata)
library(resdata)
library(readxl)
fl <- ""C:/Users/joheywood/Greater London Authority/DPA - Data monitoring"
fl <- "C:/Users/joheywood/Greater London Authority/DPA - Data monitoring"
excel_sheets(fl)
fl <- "C:/Users/joheywood/Greater London Authority/DPA - Data monitoring/Recovery Data for Dashboard.xlsx"
excel_sheets(fl)
library(resdata)
# conn <- dbConnect(SQLite(), dpth)
conn <- rdb_connect()
cn <- resdata::rdb_connect()
# flpth <- file.path(dt_pth, "Recovery Data for Dashboard.xlsx")
# flpth <- Sys.getenv("DASH_METAPATH")
# dpth <- Sys.getenv("DASH_DATAPATH")
cnfg <- yaml::yaml.load_file(here("rconfig.yml"))
library(resdata)
library(resdata)
cn <- resdata::rdb_connect()
library(resdata)
cn <- resdata::rdb_connect()
cn <- rdb_connect()
source('E:/project_folders/apps/db/code/resdata/R/insert_boro_db.R')
source('E:/project_folders/apps/db/code/resdata/R/insert_boro_db.R')
library(resdata)
Sys.time()
library(resdata)
library(resdata)
library(resdata)
library(resdata)
library(resdata)
library(resdata)
library(resdata)
resdata::refresh_metadata()
devtools::build()
devtools::document()
devtools::build()
getwd()
setwd("..")
dir()
install.packages("resdata_0.0.0.9000.tar.gz")
dir()
install.packages("../resdata_0.0.0.9000.tar.gz")
install.packages("../resdata_0.0.0.9000.tar.gz", repo = NULL, type = "source")
library(RPostgres)
install.packages("../resdata_0.0.0.9000.tar.gz", repo = NULL, type = "source")
install.packages("../resdata_0.0.0.9000.zip", repo = NULL, type = "source")
resdata::run_updates()
library(devtools)
document()
install("resdata")
setwd("..")
install("resdata")
library(resdata)
document()
setwd("resdata/")
document()
setwd("..")
install("resdata")
library(resdata)
run_updates()
library(resdata)
run_updates()
getwd()
library(devtools)
document()
setwd("..")
install("resdata")
library(devtools)
document()
setwd("..")
install("resdata/")
library(devtools)
document()
setwd("..")
install("resdata")
library(devtools)
document()
setwd("..")
install("resdata/")
library(devtools)
document()
setwd("..")
install("resdata/")
library(devtools)
document()
setwd("..")
install("resdata/")
library(devtools)
setwd("..")
install("resdata")
